{"version":3,"sources":["icons/gotoba.png","Tweet.js","TweetList.js","Menu.js","Extra.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tweet","props","state","data","className","key","this","id","src","path","title","description","React","Component","TweetList","tweets","forEach","tw","push","footer","isMax","Menu","onRefreshClicked","onToTopClicked","onClick","toTop","bind","refresh","Extra","App","SampleC","slice","list","document","getElementById","scrollTo","top","scrollHeight","left","behavior","latest","length","console","log","setState","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"um/DAAAA,EAAOC,QAAU,IAA0B,oC,uJCgC5BC,G,oCA1BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT,KAAQD,EAAME,MAHH,E,sEAQf,OACI,yBAAKC,UAAU,QAAQC,IAAKC,KAAKJ,MAAMC,KAAKI,IACxC,yBAAKH,UAAU,aACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,OAAOI,IAAK,8CAAgDF,KAAKJ,MAAMC,KAAKM,QAE/F,yBAAKL,UAAU,iBACX,yBAAKA,UAAU,QAAQE,KAAKJ,MAAMC,KAAKO,OACvC,6BAASN,UAAU,WAAWE,KAAKJ,MAAMC,KAAKQ,eAGtD,kC,GArBIC,IAAMC,YC4BXC,E,YA1BX,WAAYb,GAAQ,qEACVA,I,sEAIN,IAAIc,EAAS,GAEbT,KAAKL,MAAMc,OAAOC,SAAQ,SAACb,GACvB,IAAIc,EAAM,kBAAC,EAAD,CAAOd,KAAMA,IACvBY,EAAOG,KAAKD,MAGhB,IAAIE,EAAS,8BAKb,OAJGb,KAAKL,MAAMmB,QACVD,EAAS,yBAAKf,UAAU,OAAf,2GAGL,yBAAKG,GAAG,YAAYH,UAAU,gBACjCW,EACAI,O,GArBWP,IAAMC,WCqBfQ,G,kBApBX,WAAYpB,GAAQ,qEACVA,I,uEAINK,KAAKL,MAAMqB,qB,8BAIXhB,KAAKL,MAAMsB,mB,+BAGL,IAAD,OACL,OAAQ,yBAAKnB,UAAU,UACnB,yBAAKA,UAAU,SAASoB,QAAU,WAAK,EAAKC,SAAUC,KAAKpB,OAA3D,8CACA,yBAAKF,UAAU,SAASoB,QAAU,WAAK,EAAKG,WAAYD,KAAKpB,OAA7D,mD,GAjBOM,IAAMC,Y,MCIVe,MAJf,WACI,OAAQ,yBAAKxB,UAAU,Y,OCkEZyB,E,YA5DX,WAAY5B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT,OAAU,GACV,OAAU4B,EAAQC,MAAM,EAAG,KAJhB,E,kFAUf,IAAIC,EAAOC,SAASC,eAAe,aACnCF,EAAKG,SAAS,CACVC,IAAKJ,EAAKK,aACVC,KAAO,EACPC,SAAU,a,8BAIVC,GACJ,IAAIpB,GAAQ,EACToB,GAAUV,EAAQW,SACjBC,QAAQC,IAAI,OACZH,EAASV,EAAQW,OAAS,EAC1BrB,GAAQ,GAEZd,KAAKsC,SAAS,CACV,OAAUJ,EACV,OAAUV,EAAQC,MAAM,EAAGS,GAC3B,MAASpB,M,+BAIP,IAAD,OAEL,OACI,yBAAKhB,UAAU,OACX,kBAAC,EAAD,CACIkB,iBAAmB,WACf,EAAKK,QAAQ,EAAKzB,MAAMsC,OAAS,IAClCd,KAAKpB,MACRiB,eAAiB,WACFU,SAASC,eAAe,aAC9BC,SAAS,CACVC,IAAK,EACLE,KAAM,EACNC,SAAU,YAEfb,KAAKpB,QAEZ,kBAAC,EAAD,CACIS,OAAQT,KAAKJ,MAAMa,OACnBK,MAAOd,KAAKJ,MAAMkB,QAEtB,kBAAC,EAAD,W,GAvDER,IAAMC,WCIJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7acfe166.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gotoba.99c42fbf.png\";","import React from 'react';\r\nimport \"./Tweet.css\";\r\nimport icon from \"./icons/gotoba.png\";\r\n\r\nclass Tweet extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"data\": props.data\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tweet\" key={this.state.data.id}>\r\n                <div className=\"container\">\r\n                    <div className=\"iconColumn\">\r\n                        <img className=\"icon\" src={\"http://knights.ton-katsu.net/playtime/works\" + this.state.data.path}/>\r\n                    </div>\r\n                    <div className=\"contentColumn\">\r\n                        <div className=\"user\">{this.state.data.title}</div>\r\n                        <article className=\"content\">{this.state.data.description}</article>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n            </div>);\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default Tweet;","import React from 'react';\r\nimport \"./TweetList.css\";\r\nimport Tweet from \"./Tweet\";\r\n\r\nclass TweetList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    render() {\r\n        let tweets = [];\r\n\r\n        this.props.tweets.forEach((data) => {\r\n            let tw = (<Tweet data={data}/>);\r\n            tweets.push(tw);\r\n        });\r\n\r\n        let footer = <div></div>;\r\n        if(this.props.isMax){\r\n            footer = <div className=\"max\">これ以上過去のツイートはありません</div>\r\n        }\r\n\r\n        return (<div id=\"tweetList\" className=\"column_tweet\">\r\n            {tweets}\r\n            {footer}\r\n        </div>);\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default TweetList;\r\n","import React from 'react';\r\nimport \"./Menu.css\"\r\n\r\nclass Menu extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    refresh(){\r\n        this.props.onRefreshClicked();\r\n    }\r\n\r\n    toTop(){\r\n        this.props.onToTopClicked();\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"column\">\r\n            <div className=\"button\" onClick={(()=>{this.toTop()}).bind(this)}>最新のツイート</div>\r\n            <div className=\"button\" onClick={(()=>{this.refresh()}).bind(this)}>過去のツイート</div>\r\n        </div>);\r\n    }\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\nimport \"./Extra.css\";\r\n\r\nfunction Extra(){\r\n    return (<div className=\"column\"></div>);\r\n};\r\n\r\nexport default Extra;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport TweetList from \"./TweetList\";\nimport Menu from \"./Menu\";\nimport Extra from \"./Extra\";\nimport SampleC from \"./sampleC\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"latest\": 10,\n            \"tweets\": SampleC.slice(0, 10)\n        }\n\n    }\n\n    componentDidUpdate() {\n        let list = document.getElementById(\"tweetList\");\n        list.scrollTo({\n            top: list.scrollHeight,\n            left:  0,\n            behavior: 'smooth'\n        });\n    }\n\n    refresh(latest) {\n        let isMax = false;\n        if(latest >= SampleC.length){\n            console.log(\"max\");\n            latest = SampleC.length - 1;\n            isMax = true;\n        }\n        this.setState({\n            \"latest\": latest,\n            \"tweets\": SampleC.slice(0, latest),\n            \"isMax\": isMax\n        })\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <Menu\n                    onRefreshClicked={(() => {\n                        this.refresh(this.state.latest + 1);\n                    }).bind(this)}\n                    onToTopClicked={(() => {\n                        let list = document.getElementById(\"tweetList\");\n                        list.scrollTo({\n                            top: 0,\n                            left: 0,\n                            behavior: 'smooth'\n                        });\n                    }).bind(this)}\n                />\n                <TweetList\n                    tweets={this.state.tweets}\n                    isMax={this.state.isMax}\n                />\n                <Extra/>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}